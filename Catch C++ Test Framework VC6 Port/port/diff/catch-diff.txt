--- catch.hpp	2012-12-13 08:09:44.345250200 +0100
+++ catch-vc6.hpp	2012-12-13 12:42:08.646448000 +0100
@@ -1,6 +1,6 @@
 /*
  *  CATCH v0.9 build 11 (integration branch)
- *  Generated: 2012-12-11 09:02:46.394854
+ *  Generated: 2012-12-13 12:42:08.526000
  *  ----------------------------------------------------------
  *  This file has been merged from multiple headers. Please don't edit it directly
  *  Copyright (c) 2012 Two Blue Cubes Ltd. All rights reserved.
@@ -33,6 +33,13 @@
 #define INTERNAL_CATCH_STRINGIFY2( expr ) #expr
 #define INTERNAL_CATCH_STRINGIFY( expr ) INTERNAL_CATCH_STRINGIFY2( expr )
 
+#ifdef _MSC_VER
+#define INTERNAL_CATCH_COMPILER_IS_MSVC
+#if ( _MSC_VER >= 1200 ) && ( _MSC_VER < 1300 )
+#define INTERNAL_CATCH_COMPILER_IS_MSVC6
+#endif
+#endif
+
 #ifdef __GNUC__
 #define CATCH_ATTRIBUTE_NORETURN __attribute__ ((noreturn))
 #else
@@ -43,6 +50,10 @@
 #include <stdexcept>
 #include <algorithm>
 
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+namespace std { using ::size_t; }
+#endif
+
 namespace Catch {
 
 	class NonCopyable {
@@ -508,7 +519,11 @@
     }
 
     template<typename T>
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+    inline std::string makeString( T*& p ) {
+#else
     inline std::string makeString( T* p ) {
+#endif
         if( !p )
             return INTERNAL_CATCH_STRINGIFY( NULL );
         std::ostringstream oss;
@@ -517,7 +532,11 @@
     }
 
     template<typename T>
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+    inline std::string makeString( const T*& p ) {
+#else
     inline std::string makeString( const T* p ) {
+#endif
         if( !p )
             return INTERNAL_CATCH_STRINGIFY( NULL );
         std::ostringstream oss;
@@ -735,6 +754,12 @@
 #define TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED
 
 namespace Catch {
+
+namespace Detail {
+    // required for VC6:
+    class Approx;
+}
+
 namespace Internal {
 
     enum Operator {
@@ -756,119 +781,273 @@
 
     // So the compare overloads can be operator agnostic we convey the operator as a template
     // enum, which is used to specialise an Evaluator for doing the comparison.
-    template<typename T1, typename T2, Operator Op>
-    class Evaluator{};
+    template<Operator Op>
+    struct Evaluator
+    {
+       template<typename T1, typename T2>
+       static bool evaluate( const T1& lhs, const T2& rhs);
+    };
 
-    template<typename T1, typename T2>
-    struct Evaluator<T1, T2, IsEqualTo> {
+    template<>
+    struct Evaluator<IsEqualTo>
+    {
+       template<typename T1, typename T2>
         static bool evaluate( const T1& lhs, const T2& rhs) {
-            return const_cast<T1&>( lhs ) ==  const_cast<T2&>( rhs );
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            return lhs == rhs;
+#else
+            return const_cast<T1&>( lhs ) == const_cast<T2&>( rhs );
+#endif
         }
     };
-    template<typename T1, typename T2>
-    struct Evaluator<T1, T2, IsNotEqualTo> {
-        static bool evaluate( const T1& lhs, const T2& rhs ) {
+    template<>
+    struct Evaluator<IsNotEqualTo>
+    {
+       template<typename T1, typename T2>
+        static bool evaluate( const T1& lhs, const T2& rhs) {
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            return lhs != rhs;
+#else
             return const_cast<T1&>( lhs ) != const_cast<T2&>( rhs );
+#endif
         }
     };
-    template<typename T1, typename T2>
-    struct Evaluator<T1, T2, IsLessThan> {
-        static bool evaluate( const T1& lhs, const T2& rhs ) {
+    template<>
+    struct Evaluator<IsLessThan>
+    {
+       template<typename T1, typename T2>
+        static bool evaluate( const T1& lhs, const T2& rhs) {
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            return lhs < rhs;
+#else
             return const_cast<T1&>( lhs ) < const_cast<T2&>( rhs );
+#endif
         }
     };
-    template<typename T1, typename T2>
-    struct Evaluator<T1, T2, IsGreaterThan> {
-        static bool evaluate( const T1& lhs, const T2& rhs ) {
+    template<>
+    struct Evaluator<IsGreaterThan>
+    {
+       template<typename T1, typename T2>
+        static bool evaluate( const T1& lhs, const T2& rhs) {
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            return lhs > rhs;
+#else
             return const_cast<T1&>( lhs ) > const_cast<T2&>( rhs );
+#endif
         }
     };
-    template<typename T1, typename T2>
-    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {
-        static bool evaluate( const T1& lhs, const T2& rhs ) {
+    template<>
+    struct Evaluator<IsGreaterThanOrEqualTo>
+    {
+       template<typename T1, typename T2>
+        static bool evaluate( const T1& lhs, const T2& rhs) {
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            return lhs >= rhs;
+#else
             return const_cast<T1&>( lhs ) >= const_cast<T2&>( rhs );
+#endif
         }
     };
-    template<typename T1, typename T2>
-    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {
-        static bool evaluate( const T1& lhs, const T2& rhs ) {
+    template<>
+    struct Evaluator<IsLessThanOrEqualTo>
+    {
+        template<typename T1, typename T2>
+        static bool evaluate( const T1& lhs, const T2& rhs) {
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            return lhs <= rhs;
+#else
             return const_cast<T1&>( lhs ) <= const_cast<T2&>( rhs );
+#endif
         }
     };
 
-    template<Operator Op, typename T1, typename T2>
-    bool applyEvaluator( const T1& lhs, const T2& rhs ) {
-        return Evaluator<T1, T2, Op>::evaluate( lhs, rhs );
-    }
+    template<Operator Op>
+    struct Comparator
+    {
+#ifndef INTERNAL_CATCH_COMPILER_IS_MSVC6
+
+        template<typename T1, typename T2>
+        static bool compare( const T1& lhs, const T2& rhs ) {
+            return Evaluator<Op>::evaluate( lhs, rhs );
+        }
+#else
+class ::Catch::Detail::Approx;
 
-    // This level of indirection allows us to specialise for integer types
-    // to avoid signed/ unsigned warnings
+#define INTERNAL_CATCH_DEFINE_COMPARE( LhsT, RhsT ) \
+        static bool compare( const LhsT& lhs, const RhsT& rhs ) { \
+            return Evaluator<Op>::evaluate( lhs, rhs ); \
+        }
+
+        INTERNAL_CATCH_DEFINE_COMPARE( int, int )
+        INTERNAL_CATCH_DEFINE_COMPARE( int, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( int, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( int, double )
+        INTERNAL_CATCH_DEFINE_COMPARE( int, ::Catch::Detail::Approx )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( long, int )
+        INTERNAL_CATCH_DEFINE_COMPARE( long, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( long, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( long, double )
+        INTERNAL_CATCH_DEFINE_COMPARE( long, ::Catch::Detail::Approx )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( float, int )
+        INTERNAL_CATCH_DEFINE_COMPARE( float, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( float, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( float, double )
+        INTERNAL_CATCH_DEFINE_COMPARE( float, ::Catch::Detail::Approx )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( double, int )
+        INTERNAL_CATCH_DEFINE_COMPARE( double, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( double, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( double, double )
+        INTERNAL_CATCH_DEFINE_COMPARE( double, ::Catch::Detail::Approx )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( ::Catch::Detail::Approx, int )
+        INTERNAL_CATCH_DEFINE_COMPARE( ::Catch::Detail::Approx, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( ::Catch::Detail::Approx, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( ::Catch::Detail::Approx, double )
+
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, int )
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, double )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, ::Catch::Detail::Approx )
+
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, int )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, long )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, float )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, double )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, ::Catch::Detail::Approx )
+
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( int, unsigned int )
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( int, unsigned long )
+
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( long, unsigned int )
+//      exclude: error C2668: 'compare' : ambiguous call to overloaded function
+//        INTERNAL_CATCH_DEFINE_COMPARE( long, unsigned long )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, unsigned int )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned int, unsigned long )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, unsigned int )
+        INTERNAL_CATCH_DEFINE_COMPARE( unsigned long, unsigned long )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( float, unsigned int )
+        INTERNAL_CATCH_DEFINE_COMPARE( float, unsigned long )
+
+        INTERNAL_CATCH_DEFINE_COMPARE( double, unsigned int )
+        INTERNAL_CATCH_DEFINE_COMPARE( double, unsigned long )
 
-    // "base" overload
-    template<Operator Op, typename T1, typename T2>
-    bool compare( const T1& lhs, const T2& rhs ) {
-        return Evaluator<T1, T2, Op>::evaluate( lhs, rhs );
-    }
+        INTERNAL_CATCH_DEFINE_COMPARE( ::Catch::Detail::Approx, unsigned int )
+        INTERNAL_CATCH_DEFINE_COMPARE( ::Catch::Detail::Approx, unsigned long )
 
-    // unsigned X to int
-    template<Operator Op> bool compare( unsigned int lhs, int rhs ) {
-        return applyEvaluator<Op>( lhs, static_cast<unsigned int>( rhs ) );
-    }
-    template<Operator Op> bool compare( unsigned long lhs, int rhs ) {
-        return applyEvaluator<Op>( lhs, static_cast<unsigned int>( rhs ) );
-    }
-    template<Operator Op> bool compare( unsigned char lhs, int rhs ) {
-        return applyEvaluator<Op>( lhs, static_cast<unsigned int>( rhs ) );
-    }
+        INTERNAL_CATCH_DEFINE_COMPARE( std::string, std::string )
 
-    // unsigned X to long
-    template<Operator Op> bool compare( unsigned int lhs, long rhs ) {
-        return applyEvaluator<Op>( lhs, static_cast<unsigned long>( rhs ) );
-    }
-    template<Operator Op> bool compare( unsigned long lhs, long rhs ) {
-        return applyEvaluator<Op>( lhs, static_cast<unsigned long>( rhs ) );
-    }
-    template<Operator Op> bool compare( unsigned char lhs, long rhs ) {
-        return applyEvaluator<Op>( lhs, static_cast<unsigned long>( rhs ) );
-    }
+#undef INTERNAL_CATCH_DEFINE_COMPARE
+#endif
+        // unsigned X to int
+        static bool compare( unsigned int lhs, int rhs ) {
+            return Evaluator<Op>::evaluate( lhs, static_cast<unsigned int>( rhs ) );
+        }
+        static bool compare( unsigned long lhs, int rhs ) {
+            return Evaluator<Op>::evaluate( lhs, static_cast<unsigned int>( rhs ) );
+        }
+        static bool compare( unsigned char lhs, int rhs ) {
+            return Evaluator<Op>::evaluate( lhs, static_cast<unsigned int>( rhs ) );
+        }
 
-    // int to unsigned X
-    template<Operator Op> bool compare( int lhs, unsigned int rhs ) {
-        return applyEvaluator<Op>( static_cast<unsigned int>( lhs ), rhs );
-    }
-    template<Operator Op> bool compare( int lhs, unsigned long rhs ) {
-        return applyEvaluator<Op>( static_cast<unsigned int>( lhs ), rhs );
-    }
-    template<Operator Op> bool compare( int lhs, unsigned char rhs ) {
-        return applyEvaluator<Op>( static_cast<unsigned int>( lhs ), rhs );
-    }
+        // unsigned X to long
+        static bool compare( unsigned int lhs, long rhs ) {
+            return Evaluator<Op>::evaluate( lhs, static_cast<unsigned long>( rhs ) );
+        }
+        static bool compare( unsigned long lhs, long rhs ) {
+            return Evaluator<Op>::evaluate( lhs, static_cast<unsigned long>( rhs ) );
+        }
+        static bool compare( unsigned char lhs, long rhs ) {
+            return Evaluator<Op>::evaluate( lhs, static_cast<unsigned long>( rhs ) );
+        }
 
-    // long to unsigned X
-    template<Operator Op> bool compare( long lhs, unsigned int rhs ) {
-        return applyEvaluator<Op>( static_cast<unsigned long>( lhs ), rhs );
-    }
-    template<Operator Op> bool compare( long lhs, unsigned long rhs ) {
-        return applyEvaluator<Op>( static_cast<unsigned long>( lhs ), rhs );
-    }
-    template<Operator Op> bool compare( long lhs, unsigned char rhs ) {
-        return applyEvaluator<Op>( static_cast<unsigned long>( lhs ), rhs );
-    }
+        // int to unsigned X
+        static bool compare( int lhs, unsigned int rhs ) {
+            return Evaluator<Op>::evaluate( static_cast<unsigned int>( lhs ), rhs );
+        }
+        static bool compare( int lhs, unsigned long rhs ) {
+            return Evaluator<Op>::evaluate( static_cast<unsigned int>( lhs ), rhs );
+        }
+        static bool compare( int lhs, unsigned char rhs ) {
+            return Evaluator<Op>::evaluate( static_cast<unsigned int>( lhs ), rhs );
+        }
 
-    // pointer to long (when comparing against NULL)
-    template<Operator Op, typename T> bool compare( long lhs, T* rhs ) {
-        return Evaluator<T*, T*, Op>::evaluate( reinterpret_cast<T*>( lhs ), rhs );
-    }
-    template<Operator Op, typename T> bool compare( T* lhs, long rhs ) {
-        return Evaluator<T*, T*, Op>::evaluate( lhs, reinterpret_cast<T*>( rhs ) );
-    }
+        // long to unsigned X
+        static bool compare( long lhs, unsigned int rhs ) {
+            return Evaluator<Op>::evaluate( static_cast<unsigned long>( lhs ), rhs );
+        }
+        static bool compare( long lhs, unsigned long rhs ) {
+            return Evaluator<Op>::evaluate( static_cast<unsigned long>( lhs ), rhs );
+        }
+        static bool compare( long lhs, unsigned char rhs ) {
+            return Evaluator<Op>::evaluate( static_cast<unsigned long>( lhs ), rhs );
+        }
 
-    // pointer to int (when comparing against NULL)
-    template<Operator Op, typename T> bool compare( int lhs, T* rhs ) {
-        return Evaluator<T*, T*, Op>::evaluate( reinterpret_cast<T*>( lhs ), rhs );
-    }
-    template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {
-        return Evaluator<T*, T*, Op>::evaluate( lhs, reinterpret_cast<T*>( rhs ) );
-    }
+        // pointer to long (when comparing against NULL)
+        template<typename T>
+        static bool compare( long lhs, const T* rhs ) {
+            return Evaluator<Op>::evaluate( reinterpret_cast<const T*>( lhs ), rhs );
+        }
+
+        template<typename T>
+        static bool compare( const T* lhs, long rhs ) {
+            return Evaluator<Op>::evaluate( lhs, reinterpret_cast<const T*>( rhs ) );
+        }
+
+#ifndef INTERNAL_CATCH_COMPILER_IS_MSVC6
+        template<typename T>
+        static bool compare( long lhs, T* rhs ) {
+            return Evaluator<Op>::evaluate( reinterpret_cast<T*>( lhs ), rhs );
+        }
+
+        template<typename T>
+        static bool compare( T* lhs, long rhs ) {
+            return Evaluator<Op>::evaluate( lhs, reinterpret_cast<T*>( rhs ) );
+        }
+#endif
+
+        // pointer to int (when comparing against NULL)
+        template<typename T>
+        static bool compare( int lhs, const T* rhs ) {
+            return Evaluator<Op>::evaluate( reinterpret_cast<const T*>( lhs ), rhs );
+        }
+
+        template<typename T>
+        static bool compare( const T* lhs, int rhs ) {
+            return Evaluator<Op>::evaluate( lhs, reinterpret_cast<const T*>( rhs ) );
+        }
+
+#ifndef INTERNAL_CATCH_COMPILER_IS_MSVC6
+        template<typename T>
+        static bool compare( int lhs, T* rhs ) {
+            return Evaluator<Op>::evaluate( reinterpret_cast<T*>( lhs ), rhs );
+        }
+
+        template<typename T>
+        static bool compare( T* lhs, int rhs ) {
+            return Evaluator<Op>::evaluate( lhs, reinterpret_cast<T*>( rhs ) );
+        }
+#endif
+
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+        template<typename T>
+        static bool compare( T* const & lhs, T* const & rhs ) {
+            return Evaluator<Op>::evaluate( lhs, rhs );
+        }
+#endif
+    };
 
 } // end of namespace Internal
 } // end of namespace Catch
@@ -904,16 +1083,55 @@
 
 private:
     AssertionResultData m_data;
+public:
     struct ExprComponents {
         ExprComponents() : shouldNegate( false ) {}
         bool shouldNegate;
         std::string lhs, rhs, op;
     } m_exprComponents;
+private:
     std::ostringstream m_stream;
 };
 
+namespace Internal {
+
+    template<Operator Op>
+    class Apply
+    {
+    public:
+        Apply( ExpressionResultBuilder & result )
+        : m_result( result ) {}
+
+        template<typename T1, typename T2>
+        ExpressionResultBuilder& captureExpression( const T1& lhs, const T2& rhs ) {
+            m_result.setResultType( Comparator<Op>::compare( lhs, rhs ) ? ResultWas::Ok : ResultWas::ExpressionFailed );
+            m_result.m_exprComponents.lhs = Catch::toString( lhs );
+            m_result.m_exprComponents.rhs = Catch::toString( rhs );
+            m_result.m_exprComponents.op = Internal::OperatorTraits<Op>::getName();
+            return m_result;
+        }
+
+        template<typename T>
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+        ExpressionResultBuilder& captureExpression( const T*& lhs, const int& rhs ) {
+#else
+        ExpressionResultBuilder& captureExpression( const T*  lhs, const int& rhs ) {
+#endif
+            return captureExpression( lhs, reinterpret_cast<const T*>( rhs ) );
+        }
+
+    private:
+        ExpressionResultBuilder & m_result;
+    };
+
+} // end namespace Internal
 } // end namespace Catch
 
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+#pragma warning( push )
+#pragma warning( disable: 4800 )
+#endif
+
 namespace Catch {
 
 struct STATIC_ASSERT_Expression_Too_Complex_Please_Rewrite_As_Binary_Comparison;
@@ -929,40 +1147,40 @@
 
     template<typename RhsT>
     ExpressionResultBuilder& operator == ( const RhsT& rhs ) {
-        return captureExpression<Internal::IsEqualTo>( rhs );
+        return Internal::Apply<Internal::IsEqualTo>(m_result).captureExpression( m_lhs, rhs );
     }
 
     template<typename RhsT>
     ExpressionResultBuilder& operator != ( const RhsT& rhs ) {
-        return captureExpression<Internal::IsNotEqualTo>( rhs );
+        return Internal::Apply<Internal::IsNotEqualTo>(m_result).captureExpression( m_lhs, rhs );
     }
 
     template<typename RhsT>
     ExpressionResultBuilder& operator < ( const RhsT& rhs ) {
-        return captureExpression<Internal::IsLessThan>( rhs );
+        return Internal::Apply<Internal::IsLessThan>(m_result).captureExpression( m_lhs, rhs );
     }
 
     template<typename RhsT>
     ExpressionResultBuilder& operator > ( const RhsT& rhs ) {
-        return captureExpression<Internal::IsGreaterThan>( rhs );
+        return Internal::Apply<Internal::IsGreaterThan>(m_result).captureExpression( m_lhs, rhs );
     }
 
     template<typename RhsT>
     ExpressionResultBuilder& operator <= ( const RhsT& rhs ) {
-        return captureExpression<Internal::IsLessThanOrEqualTo>( rhs );
+        return Internal::Apply<Internal::IsLessThanOrEqualTo>(m_result).captureExpression( m_lhs, rhs );
     }
 
     template<typename RhsT>
     ExpressionResultBuilder& operator >= ( const RhsT& rhs ) {
-        return captureExpression<Internal::IsGreaterThanOrEqualTo>( rhs );
+        return Internal::Apply<Internal::IsGreaterThanOrEqualTo>(m_result).captureExpression( m_lhs, rhs );
     }
 
     ExpressionResultBuilder& operator == ( bool rhs ) {
-        return captureExpression<Internal::IsEqualTo>( rhs );
+        return Internal::Apply<Internal::IsEqualTo>(m_result).captureExpression( m_lhs, rhs );
     }
 
     ExpressionResultBuilder& operator != ( bool rhs ) {
-        return captureExpression<Internal::IsNotEqualTo>( rhs );
+        return Internal::Apply<Internal::IsNotEqualTo>(m_result).captureExpression( m_lhs, rhs );
     }
 
     ExpressionResultBuilder& endExpression( ResultDisposition::Flags resultDisposition ) {
@@ -984,7 +1202,7 @@
     template<Internal::Operator Op, typename RhsT>
     ExpressionResultBuilder& captureExpression( const RhsT& rhs ) {
         return m_result
-            .setResultType( Internal::compare<Op>( m_lhs, rhs ) )
+            .setResultType( Internal::Comparator<Op>::compare( m_lhs, rhs ) )
             .setLhs( Catch::toString( m_lhs ) )
             .setRhs( Catch::toString( rhs ) )
             .setOp( Internal::OperatorTraits<Op>::getName() );
@@ -997,6 +1215,10 @@
 
 } // end namespace Catch
 
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+#pragma warning( pop )
+#endif
+
 namespace Catch {
 
 // Captures the LHS of the expression and wraps it in an Expression Lhs object
@@ -1188,7 +1410,10 @@
 
 #elif defined(_MSC_VER)
     extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
-    #define BreakIntoDebugger() if (IsDebuggerPresent() ) { __debugbreak(); }
+	#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+	#define __debugbreak() __asm { int 3 }
+	#endif
+	#define BreakIntoDebugger() if (IsDebuggerPresent() ) { __debugbreak(); }
     inline bool isDebuggerActive() {
         return IsDebuggerPresent() != 0;
     }
@@ -2718,6 +2943,37 @@
         virtual std::string translateActiveException() const = 0;
     };
 
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+    class ExceptionTranslatorRegistrar {
+        template<typename T>
+        class ExceptionTranslator : public IExceptionTranslator {
+        public:
+
+            ExceptionTranslator( std::string(*translateFunction)( T ) )
+            : m_translateFunction( translateFunction )
+            {}
+
+            virtual std::string translate() const {
+                try {
+                    throw;
+                }
+                catch( T ex ) {
+                    return m_translateFunction( ex );
+                }
+            }
+
+        protected:
+            std::string(*m_translateFunction)( T );
+        };
+
+    public:
+        template<typename T>
+        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T ) ) {
+            getMutableRegistryHub().registerTranslator
+                ( new ExceptionTranslator<T>( translateFunction ) );
+        }
+    };
+#else
     class ExceptionTranslatorRegistrar {
         template<typename T>
         class ExceptionTranslator : public IExceptionTranslator {
@@ -2747,6 +3003,7 @@
                 ( new ExceptionTranslator<T>( translateFunction ) );
         }
     };
+#endif
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -2764,6 +3021,13 @@
 namespace Catch {
 namespace Detail {
 
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+	template <typename T>
+	inline T max( const T& x, const T& y ) { return std::_cpp_max( x, y ); }
+#else
+	using std::max;
+#endif
+
     class Approx {
     public:
         explicit Approx ( double value )
@@ -2791,7 +3055,7 @@
 
         friend bool operator == ( double lhs, const Approx& rhs ) {
             // Thanks to Richard Harris for his help refining this formula
-            return fabs( lhs - rhs.m_value ) < rhs.m_epsilon * (rhs.m_scale + (std::max)( fabs(lhs), fabs(rhs.m_value) ) );
+            return fabs( lhs - rhs.m_value ) < rhs.m_epsilon * (rhs.m_scale + (max)( fabs(lhs), fabs(rhs.m_value) ) );
         }
 
         friend bool operator == ( const Approx& lhs, double rhs ) {
@@ -3515,8 +3779,8 @@
                     groupName += cmd[i];
                 }
                 TestCaseFilters filters( groupName );
-                for( std::size_t i = 0; i < cmd.argsCount(); ++i )
-                    filters.addFilter( TestCaseFilter( cmd[i] ) );
+                {for( std::size_t i = 0; i < cmd.argsCount(); ++i )
+                    filters.addFilter( TestCaseFilter( cmd[i] ) ); }
                 config.filters.push_back( filters );
             }
         };
@@ -3557,8 +3821,8 @@
                     groupName += cmd[i];
                 }
                 TestCaseFilters filters( groupName );
-                for( std::size_t i = 0; i < cmd.argsCount(); ++i )
-                    filters.addTags( cmd[i] );
+                {for( std::size_t i = 0; i < cmd.argsCount(); ++i )
+                    filters.addTags( cmd[i] ); }
                 config.filters.push_back( filters );
             }
         };
@@ -3883,6 +4147,22 @@
         typedef Parsers::const_iterator iterator;
 
         AllOptions() {
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+            add(Options::TestCaseOptionParser());   // Keep this one first
+
+            add(Options::TagOptionParser());
+            add(Options::ListOptionParser());
+            add(Options::ReporterOptionParser());
+            add(Options::OutputOptionParser());
+            add(Options::SuccessOptionParser());
+            add(Options::DebugBreakOptionParser());
+            add(Options::NameOptionParser());
+            add(Options::AbortOptionParser());
+            add(Options::NoThrowOptionParser());
+            add(Options::WarningsOptionParser());
+
+            add(Options::HelpOptionParser());       // Keep this one last
+#else
             add<Options::TestCaseOptionParser>();   // Keep this one first
 
             add<Options::TagOptionParser>();
@@ -3897,6 +4177,7 @@
             add<Options::WarningsOptionParser>();
 
             add<Options::HelpOptionParser>();       // Keep this one last
+#endif
         }
 
         void parseIntoConfig( const CommandParser& parser, ConfigData& config ) {
@@ -3916,7 +4197,11 @@
     private:
 
         template<typename T>
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+        void add( T & ) {
+#else
         void add() {
+#endif
             m_parsers.push_back( new T() );
         }
         Parsers m_parsers;
@@ -4670,7 +4955,8 @@
             if( pos == width ) {
                 addIndent( os, indent );
                 os << paragraph.substr( 0, wrapPoint ) << "\n";
-                return recursivelyWrapLine( os, paragraph.substr( wrapPoint+1 ), columns, indent+tab );
+                recursivelyWrapLine( os, paragraph.substr( wrapPoint+1 ), columns, indent+tab );
+                return ;
             }
             if( paragraph[pos] == '\t' ) {
                     tab = pos;
@@ -4717,7 +5003,7 @@
         }
 
         if( !displayedSpecificOption ) {
-            std::cout   << "\nCATCH v"    << libraryVersion.majorVersion << "."
+            std::cout   << "\nCATCH-VC6 v" << libraryVersion.majorVersion << "."
                                         << libraryVersion.minorVersion << " build "
                                         << libraryVersion.buildNumber;
             if( libraryVersion.branchName != "master" )
@@ -4789,7 +5075,8 @@
             if( name == "" ) {
                 std::ostringstream oss;
                 oss << name << "unnamed/" << ++m_unnamedCount;
-                return registerTest( testCase.withName( oss.str() ) );
+                registerTest( testCase.withName( oss.str() ) );
+                return;
             }
 
             if( m_functions.find( testCase ) == m_functions.end() ) {
@@ -4968,7 +5255,11 @@
                     return toString( [exception description] );
                 }
 #else
+# if defined( INTERNAL_CATCH_COMPILER_IS_MSVC6 ) && defined( _DEBUG )
+                throw std::runtime_error( "VC6: cannot correctly rethrow in debug build to report original exception" );
+# else
                 throw;
+# endif
 #endif
             }
             catch( std::exception& ex ) {
@@ -5161,13 +5452,13 @@
         std::map<std::string, IGeneratorsForTest*> m_generatorsByTestName;
     };
 
-    namespace {
+    namespace detail {
         Context* currentContext = NULL;
     }
     IMutableContext& getCurrentMutableContext() {
-        if( !currentContext )
-            currentContext = new Context();
-        return *currentContext;
+        if( !detail::currentContext )
+            detail::currentContext = new Context();
+        return *detail::currentContext;
     }
     IContext& getCurrentContext() {
         return getCurrentMutableContext();
@@ -5182,8 +5473,8 @@
     }
 
     void cleanUpContext() {
-        delete currentContext;
-        currentContext = NULL;
+        delete detail::currentContext;
+        detail::currentContext = NULL;
     }
 }
 
@@ -6240,7 +6531,11 @@
         }
 
         template<typename T>
+#ifdef INTERNAL_CATCH_COMPILER_IS_MSVC6
+        XmlWriter& writeAttribute( const std::string& name, const T& attribute, int=0 ) {
+#else
         XmlWriter& writeAttribute( const std::string& name, const T& attribute ) {
+#endif
             if( !name.empty() )
                 stream() << " " << name << "=\"" << attribute << "\"";
             return *this;
@@ -6728,7 +7023,7 @@
                     section = section->parent.get() )
                 sections.push_back( section );
 
-            typedef std::vector<ThreadedSectionInfo*>::const_reverse_iterator It;
+            typedef std::vector<ThreadedSectionInfo*>::reverse_iterator It;
             for( It it = sections.rbegin(), itEnd = sections.rend(); it != itEnd; ++it ) {
                 stream << "[Section: " << "'" + (*it)->name + "'" << "]" << std::endl;
                 (*it)->printed = true;
